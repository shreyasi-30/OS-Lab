#include <stdio.h>

int main() {
    int pid[10], at[10], bt[10], rt[10], wt[10] = {0}, tat[10] = {0}, ct[10] = {0}, done[10] = {0};
    int n, time = 0, comp = 0, prev = -1;
    float twt = 0, ttat = 0;
    
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    printf("\nEnter arrival and burst times:\n");
    for (int i = 0; i < n; i++) {
        pid[i] = i + 1;
        printf("\nProcess %d:\n", pid[i]);
        printf("Arrival time: ");
        scanf("%d", &at[i]);
        printf("Burst time: ");
        scanf("%d", &bt[i]);
        rt[i] = bt[i]; 
    }
    
    // Sort by arrival time
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (at[j] > at[j+1]) {
                int temp = at[j]; 
                at[j] = at[j+1]; 
                at[j+1] = temp;
                
                temp = bt[j]; 
                bt[j] = bt[j+1]; 
                bt[j+1] = temp;
                
                temp = rt[j]; 
                rt[j] = rt[j+1]; 
                rt[j+1] = temp;
                
                temp = pid[j]; 
                pid[j] = pid[j+1]; 
                pid[j+1] = temp;
            }
        }
    }
    
    printf("\nSJF Preemptive (SRTF) Execution Order: ");
    
    
    while (comp < n) {
        int idx = -1, min_rt = 9999;
        
      
        for (int i = 0; i < n; i++) {
            if (at[i] <= time && !done[i] && rt[i] < min_rt) {
                min_rt = rt[i];
                idx = i;
            }
        }
        
        
        if (idx == -1) {
            time++;
            continue;
        }
        
        
        if (prev != idx) {
            printf("P%d ", pid[idx]);
            prev = idx;
        }
        
       
        rt[idx]--;
        time++;
        
        
        if (rt[idx] == 0) {
            ct[idx] = time;
            tat[idx] = ct[idx] - at[idx];
            wt[idx] = tat[idx] - bt[idx];
            done[idx] = 1;
            comp++;
            prev = -1; 
            
            
            twt += wt[idx];
            ttat += tat[idx];
        }
    }
    
    printf("\n\nPID\tAT\tBT\tWT\tTAT\tCT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", pid[i], at[i], bt[i], wt[i], tat[i], ct[i]);
    }
    
    printf("\nAverage Waiting Time: %.2f", twt / n);
    printf("\nAverage Turnaround Time: %.2f\n", ttat / n);
    
    return 0;
}
